-- LocalScript (วางใน StarterPlayer > StarterPlayerScripts)
-- ESP + Toggle Menu + UI On/Off + Large Hitbox (5x HumanoidRootPart)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Settings
local ESP_ENABLED = true
local MENU_OPEN = true
local UI_VISIBLE = true
local HITBOX_ENABLED = true -- default on

-- GUI creation
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ESP_Menu_GUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = localPlayer:WaitForChild("PlayerGui")

-- Main menu frame (draggable)
local menuFrame = Instance.new("Frame")
menuFrame.Name = "Menu"
menuFrame.Size = UDim2.new(0, 260, 0, 200)
menuFrame.Position = UDim2.new(0, 20, 0, 100)
menuFrame.BackgroundTransparency = 0.15
menuFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
menuFrame.BorderSizePixel = 0
menuFrame.Parent = screenGui
menuFrame.Active = true
menuFrame.Draggable = true

local title = Instance.new("TextLabel")
title.Name = "Title"
title.BackgroundTransparency = 1
title.Size = UDim2.new(1, 0, 0, 30)
title.Font = Enum.Font.GothamBold
title.TextSize = 18
title.TextColor3 = Color3.new(1,1,1)
title.Text = "ESP Menu"
title.Parent = menuFrame

-- ESP Toggle Button
local espBtn = Instance.new("TextButton")
espBtn.Name = "ESPBtn"
espBtn.Size = UDim2.new(1, -20, 0, 36)
espBtn.Position = UDim2.new(0, 10, 0, 40)
espBtn.Parent = menuFrame
espBtn.Font = Enum.Font.Gotham
espBtn.TextSize = 16
espBtn.TextColor3 = Color3.new(1,1,1)
espBtn.BackgroundTransparency = 0.2
espBtn.Text = "ESP: ON"

-- Hitbox Toggle Button
local hitboxBtn = Instance.new("TextButton")
hitboxBtn.Name = "HitboxBtn"
hitboxBtn.Size = UDim2.new(1, -20, 0, 36)
hitboxBtn.Position = UDim2.new(0, 10, 0, 84)
hitboxBtn.Parent = menuFrame
hitboxBtn.Font = Enum.Font.Gotham
hitboxBtn.TextSize = 16
hitboxBtn.TextColor3 = Color3.new(1,1,1)
hitboxBtn.BackgroundTransparency = 0.2
hitboxBtn.Text = "Hitbox (5x): ON"

-- UI Toggle Button (icon)
local uiToggleBtn = Instance.new("TextButton")
uiToggleBtn.Name = "UIToggle"
uiToggleBtn.Size = UDim2.new(0, 40, 0, 36)
uiToggleBtn.Position = UDim2.new(1, -52, 0, 6)
uiToggleBtn.Parent = menuFrame
uiToggleBtn.Font = Enum.Font.SourceSans
uiToggleBtn.TextSize = 20
uiToggleBtn.Text = "❌" -- starts visible => ❌ meaning 'press to close UI'
uiToggleBtn.BackgroundTransparency = 0.2
uiToggleBtn.TextColor3 = Color3.new(1,1,1)

-- Close Menu Hint (for mobile)
local mobileToggleBtn = Instance.new("TextButton")
mobileToggleBtn.Name = "MobileMenuToggle"
mobileToggleBtn.Size = UDim2.new(0, 72, 0, 40)
mobileToggleBtn.Position = UDim2.new(0, 20, 1, -70) -- bottom-left
mobileToggleBtn.AnchorPoint = Vector2.new(0, 1)
mobileToggleBtn.Parent = screenGui
mobileToggleBtn.Font = Enum.Font.Gotham
mobileToggleBtn.TextSize = 16
mobileToggleBtn.Text = "Menu (P)"
mobileToggleBtn.BackgroundTransparency = 0.25
mobileToggleBtn.TextColor3 = Color3.new(1,1,1)
mobileToggleBtn.Visible = true

-- Small status label
local statusLabel = Instance.new("TextLabel")
statusLabel.Size = UDim2.new(1, -20, 0, 22)
statusLabel.Position = UDim2.new(0, 10, 0, 132)
statusLabel.BackgroundTransparency = 1
statusLabel.Font = Enum.Font.Gotham
statusLabel.TextSize = 14
statusLabel.TextColor3 = Color3.new(0.85,0.85,0.85)
statusLabel.Text = "ESP enabled"
statusLabel.Parent = menuFrame

-- Table to hold ESP UI objects per player
-- structure: { billboard = ..., frame=..., healthBar=..., hitbox = Part (if any) }
local espMap = {}

-- Utility: safe multiply vector3 by scalar
local function vecMul(v, s)
    return Vector3.new(v.X * s, v.Y * s, v.Z * s)
end

-- Create local visual hitbox part and weld to player's root
local function createLocalHitboxForCharacter(player, root, color)
    -- guard
    if not root or not root.Parent then return nil end
    -- create part
    local hb = Instance.new("Part")
    hb.Name = "LocalHitbox_" .. player.Name
    hb.Size = vecMul(root.Size, 5) -- 5x scale of HumanoidRootPart
    hb.Transparency = 0.7
    hb.CanCollide = false
    hb.CanTouch = false
    hb.Anchored = false
    hb.Massless = true
    hb.CastShadow = false
    hb.TopSurface = Enum.SurfaceType.Smooth
    hb.BottomSurface = Enum.SurfaceType.Smooth
    hb.Parent = root.Parent -- parent to character model so it's cleaned with char
    -- color/visual
    hb.Color = color
    -- weld to root with WeldConstraint
    local weld = Instance.new("WeldConstraint")
    weld.Part0 = hb
    weld.Part1 = root
    weld.Parent = hb
    -- optional: set collision group tweaks etc (client-side only)
    return hb
end

-- Remove hitbox
local function removeLocalHitbox(player)
    local data = espMap[player]
    if data and data.hitbox and data.hitbox.Parent then
        data.hitbox:Destroy()
        data.hitbox = nil
    end
end

-- Utility: create ESP for a player (BillboardGui) and hitbox if enabled
local function createESPForPlayer(player)
    if player == localPlayer then return end
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    if espMap[player] then return end

    local root = player.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end

    -- BillboardGui
    local bb = Instance.new("BillboardGui")
    bb.Name = "ESP_" .. player.Name
    bb.AlwaysOnTop = true
    bb.Size = UDim2.new(0, 140, 0, 40)
    bb.Adornee = root
    bb.Parent = player.Character

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 0.4
    frame.BorderSizePixel = 0
    frame.Parent = bb

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.TextSize = 14
    nameLabel.TextColor3 = Color3.new(1,1,1)
    nameLabel.TextStrokeTransparency = 0.7
    nameLabel.Text = player.Name
    nameLabel.Parent = frame

    -- health bar
    local healthBarBg = Instance.new("Frame")
    healthBarBg.Size = UDim2.new(1, -12, 0, 8)
    healthBarBg.Position = UDim2.new(0, 6, 1, -14)
    healthBarBg.BackgroundTransparency = 0.6
    healthBarBg.BorderSizePixel = 0
    healthBarBg.Parent = bb

    local healthBar = Instance.new("Frame")
    healthBar.Size = UDim2.new(1, 0, 1, 0)
    healthBar.BackgroundTransparency = 0.2
    healthBar.BorderSizePixel = 0
    healthBar.Parent = healthBarBg

    -- determine color by team
    local color = Color3.fromRGB(255, 204, 0) -- yellow default
    if player.Team and localPlayer.Team then
        if player.Team == localPlayer.Team then
            color = Color3.fromRGB(0, 200, 0)
        else
            color = Color3.fromRGB(220, 20, 60)
        end
    end

    frame.BackgroundColor3 = color
    healthBar.BackgroundColor3 = color:lerp(Color3.new(0,0,0), 0.45)

    -- create hitbox if enabled
    local hitboxPart = nil
    if HITBOX_ENABLED then
        hitboxPart = createLocalHitboxForCharacter(player, root, color)
    end

    espMap[player] = {
        billboard = bb,
        nameLabel = nameLabel,
        frame = frame,
        healthBar = healthBar,
        healthBg = healthBarBg,
        hitbox = hitboxPart
    }
end

local function removeESPForPlayer(player)
    local data = espMap[player]
    if not data then return end
    if data.billboard and data.billboard.Parent then
        data.billboard:Destroy()
    end
    if data.hitbox and data.hitbox.Parent then
        data.hitbox:Destroy()
    end
    espMap[player] = nil
end

local function updateESPVisual(player)
    local data = espMap[player]
    if not data or not player.Character then return end
    local root = player.Character:FindFirstChild("HumanoidRootPart")
    -- color update
    local color = Color3.fromRGB(255, 204, 0)
    if player.Team and localPlayer.Team then
        if player.Team == localPlayer.Team then
            color = Color3.fromRGB(0, 200, 0)
        else
            color = Color3.fromRGB(220, 20, 60)
        end
    end
    if data.frame then data.frame.BackgroundColor3 = color end
    if data.healthBar then data.healthBar.BackgroundColor3 = color:lerp(Color3.new(0,0,0), 0.45) end
    if data.nameLabel then data.nameLabel.Text = player.Name end

    -- update health
    local hum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if hum and data.healthBar then
        local ratio = math.clamp(hum.Health / (hum.MaxHealth > 0 and hum.MaxHealth or 1), 0, 1)
        data.healthBar.Size = UDim2.new(ratio, 0, 1, 0)
    end

    -- update hitbox size/position if it exists and root exists
    if data.hitbox and root then
        -- in case character respawned and a new root exists, re-weld
        -- update size to remain 5x of root
        data.hitbox.Size = vecMul(root.Size, 5)
        -- if the weld was lost (e.g. respawn), recreate weld
        if not data.hitbox:FindFirstChildOfClass("WeldConstraint") or data.hitbox.Parent ~= root.Parent then
            -- destroy and recreate
            pcall(function() data.hitbox:Destroy() end)
            data.hitbox = createLocalHitboxForCharacter(player, root, color)
        else
            -- update color
            data.hitbox.Color = color
        end
    else
        -- if hitbox should exist but doesn't, create it
        if HITBOX_ENABLED and root and (not data.hitbox or not data.hitbox.Parent) then
            data.hitbox = createLocalHitboxForCharacter(player, root, color)
        end
        -- if hitbox exists but feature disabled, remove it
        if (not HITBOX_ENABLED) and data.hitbox then
            pcall(function() data.hitbox:Destroy() end)
            data.hitbox = nil
        end
    end
end

-- Setup existing players
for _, p in pairs(Players:GetPlayers()) do
    if p ~= localPlayer then
        if p.Character and ESP_ENABLED then
            createESPForPlayer(p)
        end
        -- reconnect character added
        p.CharacterAdded:Connect(function()
            -- small delay for parts to exist
            wait(0.1)
            if ESP_ENABLED then createESPForPlayer(p) end
        end)
    end
end

-- Player added/removed handlers
Players.PlayerAdded:Connect(function(player)
    if player ~= localPlayer then
        player.CharacterAdded:Connect(function()
            wait(0.1)
            if ESP_ENABLED then createESPForPlayer(player) end
        end)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    removeESPForPlayer(player)
end)

-- Update visuals each frame
RunService.RenderStepped:Connect(function()
    if not ESP_ENABLED then return end
    for player, _ in pairs(espMap) do
        if player and player.Character then
            updateESPVisual(player)
        else
            -- try recreate if character exists
            if player and player.Character then createESPForPlayer(player) end
        end
    end
end)

-- Function to toggle ESP on/off
local function setESPEnabled(state)
    ESP_ENABLED = state
    espBtn.Text = "ESP: " .. (state and "ON" or "OFF")
    statusLabel.Text = state and "ESP enabled" or "ESP disabled"
    if not state then
        for p, _ in pairs(espMap) do removeESPForPlayer(p) end
    else
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= localPlayer and p.Character then createESPForPlayer(p) end
        end
    end
end

local function setHitboxEnabled(state)
    HITBOX_ENABLED = state
    hitboxBtn.Text = "Hitbox (5x): " .. (state and "ON" or "OFF")
    if not state then
        -- remove existing hitboxes
        for p, data in pairs(espMap) do
            if data and data.hitbox and data.hitbox.Parent then
                pcall(function() data.hitbox:Destroy() end)
                data.hitbox = nil
            end
        end
    else
        -- create for players
        for p, data in pairs(espMap) do
            if p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                if not data.hitbox then
                    local color = Color3.fromRGB(255, 204, 0)
                    if p.Team and localPlayer.Team then
                        if p.Team == localPlayer.Team then
                            color = Color3.fromRGB(0, 200, 0)
                        else
                            color = Color3.fromRGB(220, 20, 60)
                        end
                    end
                    data.hitbox = createLocalHitboxForCharacter(p, p.Character:FindFirstChild("HumanoidRootPart"), color)
                end
            end
        end
    end
end

-- Button events
espBtn.MouseButton1Click:Connect(function()
    setESPEnabled(not ESP_ENABLED)
end)

hitboxBtn.MouseButton1Click:Connect(function()
    setHitboxEnabled(not HITBOX_ENABLED)
end)

uiToggleBtn.MouseButton1Click:Connect(function()
    UI_VISIBLE = not UI_VISIBLE
    menuFrame.Visible = UI_VISIBLE and MENU_OPEN
    mobileToggleBtn.Visible = UI_VISIBLE
    uiToggleBtn.Text = UI_VISIBLE and "❌" or "✔️"
end)

mobileToggleBtn.MouseButton1Click:Connect(function()
    MENU_OPEN = not MENU_OPEN
    menuFrame.Visible = MENU_OPEN and UI_VISIBLE
    mobileToggleBtn.Text = MENU_OPEN and "Menu (P)" or "Show (P)"
end)

-- Keyboard: toggle menu with "P"
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        local key = input.KeyCode
        if key == Enum.KeyCode.P then
            MENU_OPEN = not MENU_OPEN
            menuFrame.Visible = MENU_OPEN and UI_VISIBLE
        end
    end
end)

-- Ensure menu visibility initial state
menuFrame.Visible = MENU_OPEN and UI_VISIBLE

-- Clean up on exit/resets
local function cleanup()
    for p, _ in pairs(espMap) do removeESPForPlayer(p) end
end

localPlayer.AncestryChanged:Connect(function()
    if not localPlayer:IsDescendantOf(game) then
        cleanup()
    end
end)

-- Ready
statusLabel.Text = "ESP ready - Menu: P / Mobile button"
